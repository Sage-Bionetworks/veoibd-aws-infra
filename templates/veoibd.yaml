---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Batch jobs for VEOIBD data validation.

Parameters:
  VpcName:
    Description: The name of the VPC to use for this Batch environment.
    Type: String
    AllowedValues: ["computevpc", "sandcastlevpc"]
  ComputeImageId:
    Description: The Genie compute resource image ID
    Type: 'AWS::EC2::Image::Id'
  MainContainer:
    Description: The Genie main processing and validation docker container image
    Type: String
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'

Resources:
  MyCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::Region}-${AWS::StackName}-CloudWatchLogGroup'
      RetentionInDays: 365

  PublishToCloudwatchPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub '${AWS::Region}-${AWS::StackName}-PublishToCloudwatchPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogGroups'
            Resource: !GetAtt MyCloudWatchLogGroup.Arn
      Roles:
        - !Ref BatchInstanceRole

  BatchServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  BatchInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  BatchInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref BatchInstanceRole
  BatchComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      State: ENABLED
      ComputeResources:
        Type: EC2
        MaxvCpus: 256
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub '{AWS::Region}-${VpcName}-VpnSecurityGroup'
        Subnets:
          - Fn::ImportValue:
              !Sub '{AWS::Region}-${VpcName}-PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '{AWS::Region}-${VpcName}-PrivateSubnet2'
        MinvCpus: 0
        ImageId: !Ref ComputeImageId
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        InstanceTypes:
          - optimal
        DesiredvCpus: 8
        Tags:
          "Name": !Sub '${AWS::Region}-${AWS::StackName}-BatchComputeEnvironment'
          "Department": !Ref Department
          "Project": !Ref Project
          "OwnerEmail": !Ref OwnerEmail
  BatchJobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      JobQueueName: !Sub '${AWS::Region}-${AWS::StackName}-BatchJobQueue'
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref BatchComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
  MainBatchJob:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: container
      JobDefinitionName: !Sub '${AWS::Region}-${AWS::StackName}-MainBatchJob'
      ContainerProperties:
        Image: !Ref MainContainer
        Vcpus: 8
        Memory: 8000
        Command:
          - python
          - input_to_database.py
          - main
        Volumes:
          - Host:
              SourcePath: "/home/ec2-user/.synapseCache"
            Name: synapsecache
        MountPoints:
          - ContainerPath: "/root/.synapseCache"
            ReadOnly: false
            SourceVolume: synapsecache
  ValidateBatchJob:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: container
      JobDefinitionName: !Sub '${AWS::Region}-${AWS::StackName}-ValidateBatchJob'
      ContainerProperties:
        Image: !Ref MainContainer
        Vcpus: 8
        Memory: 8000
        Command:
          - input_to_database.py
          - main
          - --onlyValidate
        Volumes:
          - Host:
              SourcePath: "/home/ec2-user/.synapseCache"
            Name: synapsecache
        MountPoints:
          - ContainerPath: "/root/.synapseCache"
            ReadOnly: false
            SourceVolume: synapsecache

Outputs:
  MyCloudWatchLogGroup:
    Value: !Ref MyCloudWatchLogGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudWatchLogGroup'
  BatchComputeEnvironment:
    Value: !Ref BatchComputeEnvironment
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BatchComputeEnvironment'
  BatchJobQueue:
    Value: !Ref BatchJobQueue
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BatchJobQueue'
  MainBatchJob:
    Value: !Ref MainBatchJob
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-MainBatchJob'
  ValidateBatchJob:
    Value: !Ref MainBatchJob
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ValidateBatchJob'
