AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Batch jobs for VEOIBD data validation.

Parameters:
  ComputeImageId:
    Description: The Genie compute resource image ID
    Type: 'AWS::EC2::Image::Id'
  MainImage:
    Description: The Genie main processing and validation docker container image
    Type: String

Resources:
  BatchServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  BatchInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  BatchInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref BatchInstanceRole
  BatchComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      State: ENABLED
      ComputeResources:
        Type: EC2
        MaxvCpus: 256
        SecurityGroupIds:
          - !ImportValue us-east-1-computevpc-VpnSecurityGroup
        Subnets:
          - !ImportValue us-east-1-computevpc-PrivateSubnet
          - !ImportValue us-east-1-computevpc-PrivateSubnet1
          - !ImportValue us-east-1-computevpc-PrivateSubnet2
        MinvCpus: 0
        ImageId: !Ref ComputeImageId
        InstanceRole: !GetAtt BatchInstanceProfile.Arn
        InstanceTypes:
          - optimal
        DesiredvCpus: 8
  BatchJobQueue:
    Type: "AWS::Batch::JobQueue"
    Properties:
      JobQueueName: !Join
        - '-'
        - - !Ref AWS::StackName
          - "job"
          - "queue"
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref BatchComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
  MainBatchJob:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: container
      JobDefinitionName: !Join
        - '-'
        - - !Ref AWS::StackName
          - "job"
          - "mainprocess"
      ContainerProperties:
        Image: !Ref MainImage
        Vcpus: 8
        Memory: 8000
        Command:
          - python
          - input_to_database.py
          - main
        Volumes:
          - Host:
              SourcePath: "/home/ec2-user/.synapseCache"
            Name: synapsecache
        MountPoints:
          - ContainerPath: "/root/.synapseCache"
            ReadOnly: false
            SourceVolume: synapsecache
  SubmitBatchJobLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 3
      Handler: index.lambda_handler
      Environment:
        Variables:
          JOB_NAME: !Join
            - '-'
            - - !Ref AWS::StackName
              - "job"
          JOB_QUEUE: !Join
            - '-'
            - - !Ref AWS::StackName
              - "job"
              - "queue"
          JOB_DEFINITION: !Join
            - '-'
            - - !Ref AWS::StackName
              - "job"
              - "validation"
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import logging
          import os
          import boto3
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def lambda_handler(event, context):
              batch = boto3.client('batch')
              # Log the received event
              logger.debug("Received event: " + json.dumps(event, indent=2))

              # Get parameters for the SubmitJob call
              # http://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html
              # These should be passed in via Lambda Environment Variables
              try:
                  jobName = os.environ['JOB_NAME']
                  jobQueue = os.environ['JOB_QUEUE']
                  jobDefinition = os.environ['JOB_DEFINITION']
              except (KeyError, ValueError, Exception) as e:
                  logger.error(e.response['Error']['Message'])

              # containerOverrides and parameters are optional
              if event.get('containerOverrides'):
                  containerOverrides = event['containerOverrides']
              else:
                  containerOverrides = {}
              if event.get('parameters'):
                  parameters = event['parameters']
              else:
                  parameters = {}

              try:
                  # Submit a Batch Job
                  response = batch.submit_job(jobQueue=jobQueue, jobName=jobName, jobDefinition=jobDefinition,
                                              containerOverrides=containerOverrides, parameters=parameters)
                  # Log response from AWS Batch
                  logger.debug("Response: " + json.dumps(response, indent=2))
                  # Return the jobId
                  jobId = response['jobId']
                  return {
                      'jobId': jobId
                  }
              except ClientError as e:
                  logger.error(e.response['Error']['Message'])

  PeriodicEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 day)"
      Targets:
        - Arn: !GetAtt SubmitBatchJobLambda.Arn
          Id: !Ref SubmitBatchJobLambda
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PublishToCloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: BatchJobAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:DescribeJobs
                  - batch:ListJobs
                  - batch:SubmitJob
                Resource: "*"
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SubmitBatchJobLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PeriodicEvent.Arn
  SubmitBatchJobLambdaFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue us-east-1-AccountAlertTopics-SNSAlertsErrorArn
      MetricName: !Sub "${SubmitBatchJobLambda}-FailureAlarm"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SubmitBatchJobLambda
      EvaluationPeriods: 1
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
Outputs:
  SubmitBatchJobLambda:
    Value: !Ref SubmitBatchJobLambda
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-SubmitBatchJobLambda'
  BatchComputeEnvironment:
    Value: !Ref BatchComputeEnvironment
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BatchComputeEnvironment'
  BatchJobQueue:
    Value: !Ref BatchJobQueue
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BatchJobQueue'
  MainBatchJob:
    Value: !Ref MainBatchJob
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-MainBatchJob'
